%{
	import java.io.*;
	import java.util.*;
%}

%token <sval> LITERAL,NAME,OP1,OP2,OP3,OP4,OP5,OP6,OP7,AND,OR,NOT
%token VAR,IF,ELSIF,ELSE,WHILE,RETURN,OPNAME
%type <obj> program, function, exprs, expr, binopexpr, smallexpr, commasepExpr, elseiforelse, elseifsent, elsesent, orexpr, andexpr, notexpr
%type <ival> funcargs
%type <sval> op
%right RETURN '='
%left OP1
%right OP2
%left OP3
%left OP4
%left OP5
%left OP6
%left OP7
%left UNOP
%left AND
%left OR
%right NOT

%%

start
	: program { generateProgram(name, ((Vector<Object>)($1)).toArray()); }
	;

/* A program is defined as one or more functions */
program
	:  program function 	{ ((Vector<Object>)($1)).add($2); $$=$1; }   /* if its more than one function we add it to a vector that is to be returned */
	|  function { $$=new Vector<Object>(); ((Vector<Object>)($$)).add($1); } /* if its just a single function then we return it */
	;

function
	:	/* BE CAREFUL THE varCount and VarTable count as $1 ! */
		{
			varCount = 0;
			varTable = new HashMap<String,Integer>();
		}
		NAME '(' funcargs ')'
		'{'
			variables
			exprs
		'}' { $$ = new Object[]{$2, $4, varCount, ((Vector<Object>)($8)).toArray()}; }
	;

/* count the number of arguments */
funcargs
	: /* empty */ 			{ $$ = 0; }
	| funcargs ',' NAME 	{ addVar($3); $$ = $1 + 1; }
	| NAME					{ addVar($1); $$ = 1; }
	;

/* Count the number of variables */
variables
	: /* empty */
	| VAR funcargs ';' /* We can re-use funcargs */
	;

/* I dont know if its correct way of doing this not sure yet */
exprs
	: exprs  expr ';'	 		{ ((Vector<Object>)($1)).add($2); $$=$1; }
	| expr ';'					  { $$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
	;

/* pretty basic i just translated what i wrote in jflex to this and it seem to work */
expr
  : RETURN expr				{ $$ = new Object[]{EXPRESSION_RETURN, $2}; }
  | NAME '=' expr			{ $$ = new Object[]{EXPRESSION_STORE, findVar($1), $3}; }
  | orexpr    				{ $$ = $1; }
  ;

/* One or more AND expressions with OR tokens between them */
orexpr
  : andexpr OR orexpr { $$ = new Object[]{EXPRESSION_OR, $2, new Object[]{$1,$3}}; }
  | andexpr           { $$ = $1; }
  ;

/* One or more NOT expressions with AND tokens between them*/
andexpr
  : notexpr AND andexpr { $$ = new Object[]{EXPRESSION_AND, $2, new Object[]{$1,$3}}; }
  | notexpr            { $$ = $1; }
  ;

/* Binop expressions with or without a NOT prefix (!)*/
notexpr
  : NOT notexpr  { $$ = new Object[]{EXPRESSION_NOT, $2}; }
  | binopexpr    { $$ = $1; }

/* Binary operations with 8 levels of priority */
binopexpr
	: binopexpr OP1 binopexpr	{ $$ = new Object[]{EXPRESSION_CALL, $2 ,new Object[]{$1, $3}};}
	| binopexpr OP2 binopexpr	{ $$ = new Object[]{EXPRESSION_CALL, $2 ,new Object[]{$1, $3}};}
	| binopexpr OP3 binopexpr	{ $$ = new Object[]{EXPRESSION_CALL, $2 ,new Object[]{$1, $3}};}
	| binopexpr OP4 binopexpr	{ $$ = new Object[]{EXPRESSION_CALL, $2 ,new Object[]{$1, $3}};}
	| binopexpr OP5 binopexpr	{ $$ = new Object[]{EXPRESSION_CALL, $2 ,new Object[]{$1, $3}};}
	| binopexpr OP6 binopexpr	{ $$ = new Object[]{EXPRESSION_CALL, $2 ,new Object[]{$1, $3}};}
	| binopexpr OP7 smallexpr	{ $$ = new Object[]{EXPRESSION_CALL, $2 ,new Object[]{$1, $3}};}
	| smallexpr					      { $$ = $1; }
	;

/* Not 100% sure if op smallexpr %prec UNOP needs to be here or in binopexpr */
smallexpr
	: NAME '(' commasepExpr ')' { $$ = new Object[]{EXPRESSION_CALL, $1, ((Vector<Object>)($3)).toArray()}; }
	| NAME 						{ $$ = new Object[]{EXPRESSION_FETCH, findVar($1)}; }
	| LITERAL					{ $$ = new Object[]{EXPRESSION_LITERAL, $1}; }
	| '(' expr ')'				{ $$ = $2; }
	| WHILE '(' expr ')'
	  '{'
		  exprs
	  '}' 						{ $$ = new Object[]{EXPRESSION_WHILE, $3, new Object[]{EXPRESSION_BODY, ((Vector<Object>)($6)).toArray()}}; }
	| IF '(' expr ')'
	  '{'
	  	 exprs
	  '}'
	  elseiforelse				{ $$ = new Object[]{EXPRESSION_IF, $3, new Object[]{EXPRESSION_BODY, ((Vector<Object>)($6)).toArray()}, $8}; }
  | op smallexpr %prec UNOP   { $$ = new Object[]{EXPRESSION_CALL, $1 , new Object[]{$2}}; }
	;

elseiforelse
	: /* empty */				{ $$ = null; }
	| elseifsent				{ $$ = $1; }
	| elsesent					{ $$ = $1; }
	;

elseifsent
	: ELSIF '(' expr ')'
	  '{'
		 exprs
	  '}'
	  elseifsent 				{ $$ = new Object[]{EXPRESSION_IF, $3, new Object[]{EXPRESSION_BODY, ((Vector<Object>)($6)).toArray()}, $8}; }
	| ELSIF '(' expr ')'
	  '{'
		 exprs
	  '}'
	  elsesent 					{ $$ = new Object[]{EXPRESSION_IF, $3, new Object[]{EXPRESSION_BODY, ((Vector<Object>)($6)).toArray()}, $8}; }
	| ELSIF '(' expr ')'
	  '{'
		 exprs
	  '}'						{ $$ = new Object[]{EXPRESSION_IF, $3, new Object[]{EXPRESSION_BODY, ((Vector<Object>)($6)).toArray()}, null}; }
	;

elsesent
	: ELSE
	  '{'
         exprs
	  '}'						{ $$ = new Object[]{EXPRESSION_IF, new Object[]{EXPRESSION_LITERAL, "true"}, new Object[]{EXPRESSION_BODY, ((Vector<Object>)($3)).toArray()}, null};}
	;

commasepExpr
	: /* empty */ 				    { $$ = new Vector<Object>(); }
	| commasepExpr ',' expr		{ ((Vector<Object>)($1)).add($3); $$=$1; }
	| expr						        { $$ = new Vector<Object>(); ((Vector<Object>)($$)).add($1); }
	;

op	:	OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 ;

%%

private NanoMorphoLexer lexer;
private static int varCount;
private static HashMap<String,Integer> varTable;
static private String name;
int last_token_read;

private void addVar( String name )
{
	if( varTable.get(name) != null )
	{
		yyerror("Variable "+name+" already exists");
	}
	varTable.put(name,varCount++);
}

private int findVar( String name )
{
	Integer res = varTable.get(name);
	if( res == null )
	{
		yyerror("Variable "+name+" does not exist");
	}
	return res;
}

private int yylex()
{
	int yyl_return = -1;
	try
	{
		yylval = null;
		last_token_read = yyl_return = lexer.yylex();
		if( yylval==null )
			yylval = new NanoMorphoParserVal(NanoMorphoParser.yyname[yyl_return]);
	}
	catch (IOException e)
	{
		System.err.println("IO error: "+e);
	}
	return yyl_return;
}

public void yyerror( String error )
{
    System.out.printf("Error:  %s ", error);
    System.out.printf(" in line: %d, column: %d,", lexer.getLine(), lexer.getColumn());
    System.out.printf(" last token read:  %s\n", NanoMorphoParser.yyname[last_token_read]);
    System.exit(1);
}

public NanoMorphoParser(Reader r)
{
	lexer = new NanoMorphoLexer(r, this);
}

public static void main( String args[] ) throws IOException
{
	NanoMorphoParser yyparser = new NanoMorphoParser(new FileReader(args[0]));
	name = args[0].substring(0,args[0].lastIndexOf('.'));
	yyparser.yyparse();
}


/*--------------------------------------------------------------
  ------------------- PROGRAM GENERATOR HERE--------------------
  --------------------------------------------------------------*/

  /*
	i thought i might of had to change some code in the program generator
	but it seems i dont need to at the moment so it is eaxctly the same as in the previous version
  */

   // Constants that represent the assembler functions to call.
    public final static String EXPRESSION_RETURN = "RETURN";
    public final static String EXPRESSION_STORE = "STORE";
    public final static String EXPRESSION_CALL = "CALL";
    public final static String EXPRESSION_FETCH = "FETCH";
    public final static String EXPRESSION_LITERAL = "LITERAL";
    public final static String EXPRESSION_IF = "IF";
    public final static String EXPRESSION_WHILE = "WHILE";
    public final static String EXPRESSION_BODY = "BODY";
    public final static String EXPRESSION_NOT = "NOT";
    public final static String EXPRESSION_AND = "AND";
    public final static String EXPRESSION_OR = "OR";

    private static int nextLabel = 1;


	private static void emit(String line )
	{
		System.out.println(line);
    }

	public static int newLabel()
	{
		return nextLabel++;
    }

    public void generateProgram(String filename, Object[] funs)
    {
        System.out.println("\""+filename+".mexe\" = main in");
        System.out.println("!");
        System.out.println("{{");
        for(int i = 0; i < funs.length; i++)
        {
			generateFunction((Object[])funs[i]);
        }
        System.out.println("}}");
        System.out.println("*");
        System.out.println("BASIS;");
    }

    public void generateFunction(Object[] f)
    {
        String fname = (String)f[0];
        int argCount = (Integer)f[1];
        int varCount = (Integer)f[2];

        emit("#\""+fname+"[f"+argCount+"]\" =");
        emit("[");

        if(varCount > 0 )
        {
            emit("(MakeVal null)");
            for(int i = 0; i < varCount; i++)
            {
                emit("(Push)");
            }
        }

        for (Object expr : (Object[])f[3])
        {
           generateExpr((Object[])expr);
        }
        emit("(Return)");
      	emit("];");
    }

    public void generateExpr(Object[] expr)
    {
           Object[] e = (Object[])expr;
           switch ((String)e[0])
           {
              case EXPRESSION_RETURN:
                //["RETURN",expr]
                generateExprP((Object[])e[1]);
                emit("(Return)");
                break;
              case EXPRESSION_CALL:
                //["CALL",name,args]
                Object[] args = (Object[])e[2];
                int i;
                for(i=0; i != args.length; i++)
                {
                    /*
                       Need to remember that when calling something the order should be
                       0: generateExpr
                       1: push
                          generateExpr
                       2: push
                          generateExpr
                          ..
                          ..
                     */
                    if(i==0)
                    {
                        generateExpr((Object[])args[i]);
                    }
                    else
                    {
                        generateExprP((Object[])args[i]);
                    }
                }
                emit("(Call #\""+(String)e[1]+"[f"+i+"]\" "+i+")");
                break;
              case EXPRESSION_FETCH:
                //["FETCH",pos]
                emit("(Fetch "+(int)e[1]+")");
                break;
              case EXPRESSION_LITERAL:
                //["LITERAL",string]
                emit("(MakeVal "+(String)e[1]+")");
                break;
              case EXPRESSION_IF:
                //["IF",expr,expr,expr]
                //      con  then  else
                int labElse = newLabel();
                int labEnd = newLabel();
                generateJump(((Object[])(e[1])),0,labElse);
                generateExpr(((Object[])(e[2])));
                emit("(Go _"+labEnd+")");
                emit("_"+labElse+":");

                /*
                  because the way our code is generated in nanomorpho.jflex
                  there will be a case where the 3rd value will be null.
                */
                if(((Object[])(e[3])) != null)
                {
                    generateExpr(((Object[])(e[3])));
                }
                emit("_"+labEnd+":");
                break;
              case EXPRESSION_WHILE:
                //["WHILE",expr,expr]
                int labTrue = newLabel();
                int labFalse = newLabel();
                emit("_"+labTrue+":");
                generateJump(((Object[])(e[1])),0,labFalse);
                generateExpr(((Object[])(e[2])));
                emit("(Go _"+labTrue+")");
                emit("_"+labFalse+":");
                break;
              case EXPRESSION_STORE:
                //["STORE",pos,expr]
                generateExpr((Object[])e[2]);
                emit("(Store "+(int)e[1]+")");
                break;
              case EXPRESSION_BODY:
                //["BODY",exprs]
                for (Object b_expr : (Object[])e[1])
                {
                    generateExpr((Object[])b_expr);
                }
                break;
              case EXPRESSION_NOT:
                generateExpr(((Object[])(e[1])));
                emit("(Not)");
                break;
              case EXPRESSION_AND:
                int andLab = newLabel();
                Object[] andExprs = (Object[])e[2];
                generateExpr((Object[])andExprs[0]);
                emit("(GoFalse _" + andLab + ")");
                generateExpr((Object[])andExprs[1]);
                emit("_" + andLab + ":");
                break;
              case EXPRESSION_OR:
                int orLab = newLabel();
                Object[] orExprs = (Object[])e[2];
                generateExpr((Object[])orExprs[0]);
                emit("(GoTrue _" + orLab + ")");
                generateExpr((Object[])orExprs[1]);
                emit("_" + orLab + ":");
                break;
              default:
                throw new Error("Unknown intermediate code type: \""+(String)e[0]+"\"");
           }
    }

    public void generateExprP(Object[] expr)
    {
        switch ((String)((Object[])expr)[0])
            {
            case EXPRESSION_CALL:
                Object[] args = (Object[])((Object[])expr)[2];
                int i;
                for(i=0; i != args.length; i++)
                    {
                        generateExprP((Object[])args[i]);
                    }
                if( i==0 )
                    {
                        emit("(Push)");
                    }
                emit("(Call #\""+(String)((Object[])expr)[1]+"[f"+i+"]\" "+i+")");
                break;
            case EXPRESSION_FETCH:
                //["FETCH",pos]
                emit("(FetchP "+(int)((Object[])expr)[1]+")");
                break;
            case EXPRESSION_LITERAL:
                //["LITERAL",string]
                emit("(MakeValP "+(String)((Object[])expr)[1]+")");
                break;
            default:
                throw new Error("Unknown intermediate code type: \""+(String)((Object[])expr)[0]+"\"");
            }
    }

    public void generateJump(Object[] exr, int labelTrue, int labelFalse )
    {
        switch((String)exr[0])
            {
            case EXPRESSION_LITERAL:
                //["LITERAL",string]
                String literal = (String)exr[1];
                if(literal.equals("false") || literal.equals("null"))
                    {
                        if( labelFalse!=0 ) emit("(Go _"+labelFalse+")");
                        return;
                    }
                if( labelTrue!=0 ) emit("(Go _"+labelTrue+")");
                return;
            default:
                generateExpr(exr);
                if( labelTrue!=0 ) emit("(GoTrue _"+labelTrue+")");
                if( labelFalse!=0 ) emit("(GoFalse _"+labelFalse+")");
            }
    }
